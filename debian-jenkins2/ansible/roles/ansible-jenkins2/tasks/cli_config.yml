---
# This file is not included by default. It can be included via a task:
# include: "cli_config_{{ ansible_os_family }}.yml"

# Enables the Jenkins CLI and configures the 'admin' account so that it can be
# used to connect to the CLI.

- name: Create Jenkins Init Script Directory
  # Reference: https://wiki.jenkins-ci.org/display/JENKINS/Post-initialization+script
  file:
    path: /var/lib/jenkins/init.groovy.d
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755
  become: true

- name: Jenkins Script - Install plugin
  template:
    src: "{{ item.src }}"
    dest: "/var/lib/jenkins/init.groovy.d/{{ item.dest }}"
    owner: jenkins
    group: jenkins
    mode: 0744
  with_items:
    - { src: "proxy.groovy",  dest: "00proxy.groovy" }
    - { src: "updatePlugins.groovy",  dest: "01updatePlugins.groovy" }
    - { src: "installPlugins.groovy", dest: "02installPlugins.groovy" }
    - { src: "globalConfig.groovy",   dest: "03globalConfig.groovy" }
    - { src: "slaveAgentPort.groovy",   dest: "03slaveAgentPort.groovy" }
    - { src: "setEMailSettings.groovy",     dest: "03setEMailSettings.groovy" }
  become: true
  notify:
    - "Restart Service 'jenkins'"

- name: Jenkins Script - Set Security Realm to Jenkins DB
  template:
    src: "{{ item.src }}"
    dest: "/var/lib/jenkins/init.groovy.d/{{ item.dest }}"
    owner: jenkins
    group: jenkins
    mode: 0744
  with_items:
    - { src: "enableJenkinsSecurity.groovy",  dest: "03enableSecurityRealm.groovy" }
  become: true
  notify:
    - "Restart Service 'jenkins'"
  when: jenkins_security_realm is defined and jenkins_security_realm == 'jenkins'

- name: Jenkins Script - Set Security Realm to LDAP
  template:
    src: "{{ item.src }}"
    dest: "/var/lib/jenkins/init.groovy.d/{{ item.dest }}"
    owner: jenkins
    group: jenkins
    mode: 0744
  with_items:
    - { src: "enableLDAPSecurity.groovy",  dest: "03enableSecurityRealm.groovy" }
  become: true
  notify:
    - "Restart Service 'jenkins'"
  when: jenkins_security_realm is defined and jenkins_security_realm == 'ldap'

- name: Jenkins Script - Set Authorization Strategy to Role Based
  template:
    src: "{{ item.src }}"
    dest: "/var/lib/jenkins/init.groovy.d/{{ item.dest }}"
    owner: jenkins
    group: jenkins
    mode: 0744
  with_items:
    - { src: "enableRoleBasedAuthorizationStrategy.groovy",  dest: "04enableAuthorizationStrategy.groovy" }
  become: true
  notify:
    - "Restart Service 'jenkins'"
  when: jenkins_authorization_strategy is defined and jenkins_authorization_strategy == 'role'


- name: Jenkins Script - Set Authorization Strategy to Full Control User Logged In
  template:
    src: "{{ item.src }}"
    dest: "/var/lib/jenkins/init.groovy.d/{{ item.dest }}"
    owner: jenkins
    group: jenkins
    mode: 0744
  with_items:
    - { src: "enableFullControlOnceLoggedInAuthorizationStrategy.groovy",  dest: "04enableAuthorizationStrategy.groovy" }
  become: true
  notify:
    - "Restart Service 'jenkins'"
  when: jenkins_authorization_strategy is defined and jenkins_authorization_strategy == 'full'

- name: Jenkins Script - Set Authorization Strategy to Unsecured
  template:
    src: "{{ item.src }}"
    dest: "/var/lib/jenkins/init.groovy.d/{{ item.dest }}"
    owner: jenkins
    group: jenkins
    mode: 0744
  with_items:
    - { src: "enableUnsecuredAuthorizationStrategy.groovy",  dest: "04enableAuthorizationStrategy.groovy" }
  become: true
  notify:
    - "Restart Service 'jenkins'"
  when: jenkins_authorization_strategy is defined and jenkins_authorization_strategy == 'unsecured'


- name: Generate SSH Keys for jenkins Service Account
  user:
    name: jenkins
    generate_ssh_key: yes
  become: true

- name: Read SSH Public Key for jenkins Service Account
  shell: cat /var/lib/jenkins/.ssh/id_rsa.pub
  become: true
  changed_when: false
  register: jenkins_user_ssh_public_file

- name: Parse SSH Public Key for jenkins Service Account
  set_fact: jenkins_user_ssh_public_key="{{ jenkins_user_ssh_public_file.stdout_lines[0] }}"

- name: Jenkins Script - Configure SSH Keys for admin
  template:
    src: adminSshKeys.groovy
    dest: /var/lib/jenkins/init.groovy.d/adminSshKeys.groovy
    owner: jenkins
    group: jenkins
    mode: 0744
  become: true
  notify:
    - "Restart Service 'jenkins'"

- name: Jenkins Script - Refresh Update Center
  template:
    src: updateCenterRefresh.groovy
    dest: /var/lib/jenkins/init.groovy.d/updateCenterRefresh.groovy
    owner: jenkins
    group: jenkins
    mode: 0744
  become: true
  notify:
    - "Restart Service 'jenkins'"


# Fire any pending restart handlers now, as all of the above scripts will not 
# be run until Jenkins restarts, and are required in order for the CLI-using
# tasks below to work.
- meta: flush_handlers

### At this point (once the service is restarted), the CLI itself should be usable
### by the 'jenkins' system user (and its SSH keys).
##
##- name: Create Jenkins CLI Directory
##  file:
##    path: /opt/jenkins
##    state: directory
##    owner: jenkins
##    group: jenkins
##    mode: 0755
##  become: true
##
### The CLI comes "baked in" to the Jenkins WAR. Easiest way to extract it is 
### just to download it.
##- name: Get Jenkins CLI
##  get_url:
##    url: "http://localhost:{{ jenkins_port }}{{ jenkins_context_path | default('') }}/jnlpJars/jenkins-cli.jar"
##    dest: /opt/jenkins/jenkins-cli.jar
##    owner: jenkins
##    group: jenkins
##    mode: 0444
##  become: true
##
##- name: Verify CLI
##  shell: "java -jar /opt/jenkins/jenkins-cli.jar -s http://localhost:{{ jenkins_port }}{{ jenkins_context_path | default('') }} who-am-i"
##  register: cli_whoami
##  become: true
##  become_user: jenkins
##  changed_when: false
